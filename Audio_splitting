import os
from pydub import AudioSegment
from pydub.utils import make_chunks

def sanitize_filename(filename):
    """
    Sanitizes a filename by removing extra spaces and invalid characters.
    """
    return filename.strip().replace(' ', '_').replace('.', '')

def split_audio_folder(input_folder, output_folder, chunk_length_ms=10000):
    """
    Splits all audio files in a folder into chunks of specified duration.

    Args:
        input_folder (str): Path to the folder containing audio files.
        output_folder (str): Path to the folder where the chunks will be saved.
        chunk_length_ms (int): Duration of each chunk in milliseconds. Default is 10 seconds (10000 ms).
    """
    # Ensure the output folder exists
    os.makedirs(output_folder, exist_ok=True)

    # Iterate through all files in the input folder
    for file_name in os.listdir(input_folder):
        file_path = os.path.join(input_folder, file_name)

        # Check if the file is an audio file
        if os.path.isfile(file_path) and file_name.lower().endswith(('.wav', '.mp3', '.flac', '.ogg', '.m4a')):
            print(f"Processing: {file_name}")

            # Sanitize file name
            sanitized_name = sanitize_filename(os.path.splitext(file_name)[0])

            # Create a subfolder for the chunks of this audio file
            audio_output_folder = os.path.join(output_folder, sanitized_name)
            
            # Check if the audio is already processed
            if os.path.exists(audio_output_folder) and len(os.listdir(audio_output_folder)) > 0:
                print(f"Skipping: {file_name} (already processed)")
                continue  # Skip to the next file

            # Ensure the subfolder exists
            os.makedirs(audio_output_folder, exist_ok=True)

            # Load the audio file
            audio = AudioSegment.from_file(file_path)

            # Split the audio into chunks
            chunks = make_chunks(audio, chunk_length_ms)

            # Save each chunk to a separate file
            for i, chunk in enumerate(chunks):
                chunk_name = os.path.join(audio_output_folder, f"{sanitized_name}_{i+1}.wav")
                chunk.export(chunk_name, format="wav")
                print(f"Exported: {chunk_name}")

# Example usage
input_folder = "Audio"  # Replace with your folder containing audio files
output_folder = "AudioSplitted"  # Replace with your desired output folder
split_audio_folder(input_folder, output_folder)
